一.水平排列
第一部分：center inline elements（text,links,inline-block,inline-table, inline-flex )horizontally
.center-children {
  text-align: center;
}
第二部分：center a block-level element by giving it margin-left and margin-right of auto and it has a set width.
.center-me {
  margin: 0 auto;
}
第三部分：
1.two or more block-level elements that need to be centered horizontally in a row,
.inline-block-center {
  text-align: center;
}
.inline-block-center div {
  display: inline-block;
  text-align: left;
}

2.flex-center {
  display: flex;
  justify-content: center;
}
3.仍显示为块级元素，垂直堆叠：
main div {
  background: black;
  margin: 0 auto;
  color: white;
  padding: 15px;
  margin: 5px auto;
}

main div:nth-child(1) {
  width: 200px;
}
main div:nth-child(2) {
  width: 400px;
}
main div:nth-child(3) {
  width: 125px;
}
二：垂直居中
第一部分：
1.Sometimes inline / text elements can appear vertically centered, just because there is equal padding above and below them.
2.If padding isn't an option for some reason, and you're trying to center some text that you know will not wrap,
.center-text-trick {
  height: 100px;
  line-height: 100px;
  white-space: nowrap;
}
3.multiple lines/table cell
.center-table {
  display: table;
  height: 250px;
  background: white;
  width: 240px;
  margin: 20px;
}
.center-table p {
  display: table-cell;
  margin: 0;
  background: black;
  color: white;
  padding: 20px;
  border: 10px solid white;
  vertical-align: middle;
}
4.mutiple lines/flexbox
.flex-center-vertically {
  display: flex;
  justify-content: center;
  flex-direction: column;
  height: 400px;
}
5."ghost element" technique, in which a full-height pseudo element is placed inside the container and 
the text is vertically aligned with that.
.ghost-center {
  position: relative;
}
.ghost-center::before {
  content: " ";
  display: inline-block;
  height: 100%;
  width: 1%;
  vertical-align: middle;
}
.ghost-center p {
  display: inline-block;
  vertical-align: middle;
}
第二部分
1.块级元素，高度已知
.parent {
  position: relative;
}
.child {
  position: absolute;
  top: 50%;
  height: 100px;
  margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */
}
2.高度未知
.parent {
  position: relative;
}
.child {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}
3.
.parent {
  display: flex;
  flex-direction: column;
  justify-content: center;
}
三.垂直居中对齐
.parent {
  display: flex;
  justify-content: center;
  align-items: center;
}
四：有效的包含浮动
“clearfix”技巧是基于在父元素上使用“:before”和“:after”两个伪类。使用这些伪类，我们可以在浮动元素的父容器前面和后面创建隐藏元素。
“:before”伪类是用来防止子元素顶部的外边距塌陷，使用“display: table”创建一个匿名的“table-cell”元素。这也确保在IE6和IE7下具有一致性。
“:after”伪类是用来防止子元素的底部的外边距塌陷，以及用来清除元素的浮动。
在IE6和7的浏览器中，加上“*zoom”属性来触发父元素的hasLayout的机制。决定了元素怎样渲染内容，以及元素与元素之间的相互影响。
一个常见的方法是将定义一个类名，把这个类名加到需要清除浮动的容器上。例如使用“clearfix”清除浮动，
在需要清除浮动的容器上添加这个类名“group”。

.group:before,
.group:after {
  content: "";
  display: table;
}
.group:after {
  clear: both;
}
.group {
  *zoom: 1;
}	
设置了位移属性的相对定位元素，他在页面中仍然是正常的、静态的，仍属于自然流。在这种情况下，其他元素不会占用相对定们元素当初的位置。

绝对定位元素会脱离文档流。绝对定位元素直接从文档流中移出，绝对定位元素的位置直接和父容器是否设置了相对定位（绝对定位）有直接关系。
绝对定位元素需要至少一个祖先元素设置了相对定位（绝对定位），不然元素定位会相对于页面的主体进行定位。
使用绝对定位的元素可以指定垂直和水平的位移属性，使绝对定位元素相对于设置了相对定们的祖先元素边缘进行移位。
然而，使用了绝对定位的元素并没有进行任何盒子位移属性设置，那么绝对定位元素的顶部和左部会和设置了相对定位的父元素的顶边和左边重合。

固定定位和绝对定位很类似，但是他定位是相对于浏览器窗口，并且不会随滚动条进行滚动。也就是说，不管用户停留在页面那个地方，固定定位的元素将始终停留在页面的一个地方。
“position”属性值中，仅有“fixed”属性值不能在IE6浏览器下运行

